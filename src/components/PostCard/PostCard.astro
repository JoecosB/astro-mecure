---
import BlurPostCard from './BlurPostCard.astro'
import MaterialPostCard from './MaterialPostCard.astro';
import FullPostCard from './FullPostCard.astro';
import PlainPostCard from './PlainPostCard.astro';
import type { HTMLAttributes } from 'astro/types';
import { twMerge } from 'tailwind-merge';

export interface BasePostCardProps {
  class?: string;
  title: string;
  excerpt?: string;
  url: string;
  date: Date;
  image?: string;
  tags?: Array<{
    label: string;
    url: string;
  }>;
  category?: {
    label: string;
    url: string;
  };
  wordCount?: number;
  readingTime?: number;
}


export interface BlurPostCardProps extends BasePostCardProps {
  imagePosition?: 'left' | 'right';
  variant?: 'blur';
}

export interface FullPostCardProps extends BasePostCardProps {
  variant?: 'full';
}

export interface MaterialPostCardProps extends BasePostCardProps {
  imagePosition?: 'left' | 'right';
  variant?: 'material';
}

export interface PlainPostCardProps extends BasePostCardProps {
  imagePosition?: 'left' | 'right';
  variant?: 'plain';
}

export type PostCardProps = BlurPostCardProps | MaterialPostCardProps | FullPostCardProps | PlainPostCardProps;
export type Props = PostCardProps;

const variantComponents = {
  blur: BlurPostCard,
  material: MaterialPostCard,
  full: FullPostCard,
  plain: PlainPostCard,
}

const {
  variant = 'plain',
  class: className,
  ...rest
} = Astro.props;
const VariantPostCard = variantComponents[variant];

---

<VariantPostCard class={twMerge(
  'postcard-animation',
  'transition-transform duration-300 md:hover:scale-[1.05]',
  'ring-1 ring-gray-600/10 dark:ring-white/5',
  'border-highlight plate-shadow z-10',
  className
)} {...rest} />


<script>
// const animeIn: Keyframe[] = [
//   {
//     opacity: 0,
//     transform: 'translateY(36px) scale(0.95)',
//   },
//   {
//     opacity: 1,
//     transform: 'translateY(0) scale(1)'
//   }
// ]
// const observer = new IntersectionObserver((entries) => {
//   entries.forEach(entry => {
//     if (entry.intersectionRatio > 0) {
//       entry.target.getAnimations().forEach(animation => { 
//         animation.play();
//       })
//       observer.unobserve(entry.target)
//     }
//   })
// }, {
//   threshold: [0, 1]
// })


// const observePostcard = () => {
//   document.querySelectorAll('.postcard-animation').forEach((element => {
//     if (element instanceof HTMLElement) {
//       element.classList.remove('opacity-0')
//     }
//     element.animate(animeIn, {
//       duration: 250,
//       easing: 'ease-out',
//     }).pause()
//     observer.observe(element)
//   }))
// }
// observePostcard();
// document.addEventListener('swup:pageView', () => {
//   observePostcard();
// });
</script>